package p1881maxvalueafterinsertion

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_maxValue(t *testing.T) {
	for _, tc := range []struct {
		n    string
		x    int
		want string
	}{
		{"469975787943862651173569913153377", 3, "4699757879438632651173569913153377"},
		{"-132", 3, "-1323"},
		{"-55", 2, "-255"},
		{"-1234567654321", 2, "-12234567654321"},
		{"1234567654321", 2, "21234567654321"},
		{"343367251721999681862993841747491817947752894218652923616114282942544295156185768467576619716274164557336353933267454398724612899586751721772191142656286733181951135381292118979689833277319376121521718717689589311638317862985192575588882589957375528968496499427948524734452186285286967362514471799786518155293822918761613326391894493319913186144348854189317661123758581931669752764195353657818786663361582425317522515217793756839339381532298733133316572994351385587213117597327618581396193541665636394589482892234776168565489153687347956755958585888274316649", 1,
			"3433672517219996818629938417474918179477528942186529236161142829425442951561857684675766197162741645573363539332674543987246128995867517217721911426562867331819511353812921189796898332773193761215217187176895893116383178629851925755888825899573755289684964994279485247344521862852869673625144717997865181552938229187616133263918944933199131861443488541893176611237585819316697527641953536578187866633615824253175225152177937568393393815322987331333165729943513855872131175973276185813961935416656363945894828922347761685654891536873479567559585858882743166491",
			//"1343367251721999681862993841747491817947752894218652923616114282942544295156185768467576619716274164557336353933267454398724612899586751721772191142656286733181951135381292118979689833277319376121521718717689589311638317862985192575588882589957375528968496499427948524734452186285286967362514471799786518155293822918761613326391894493319913186144348854189317661123758581931669752764195353657818786663361582425317522515217793756839339381532298733133316572994351385587213117597327618581396193541665636394589482892234776168565489153687347956755958585888274316649"
		},
		{"73", 6, "763"},
		{"99", 9, "999"},
	} {
		t.Run(fmt.Sprintf("%+v", tc.n), func(t *testing.T) {
			require.Equal(t, tc.want, maxValue(tc.n, tc.x))
		})
	}
}

func maxValue(n string, x int) string {
	// Insert x at a position where it is strictly smaller than all
	// numbers before it (from the left)
	// I.e.,
	ch := rune('0' + x)
	if n[0] == '-' {
		return "-" + invMaxValue(n[1:], x)
	}
	nlen := len(n)
	for i := 0; i < nlen; i++ {
		if int(n[i]-'0') < x {
			res := n[:i] + string(ch) + n[i:]
			return res
		}
	}
	res := n + string(ch)
	return res
}

func invMaxValue(n string, x int) string {
	// Reading from right to left, insert x at the first position where
	// the number in n is >= x
	ch := rune('0' + x)
	nlen := len(n)
	for i := 0; i < nlen; i++ {
		if int(n[i]-'0') > x {
			res := n[:i] + string(ch) + n[i:]
			return res
		}
	}
	res := n + string(ch)
	return res
}
