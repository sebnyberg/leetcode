package p0928minimizemalwarespread

import (
	"fmt"
	"testing"

	"github.com/sebnyberg/leetcode"
	"github.com/stretchr/testify/require"
)

func Test_minMalwareSpread(t *testing.T) {
	for i, tc := range []struct {
		graph   [][]int
		initial []int
		want    int
	}{
		{
			leetcode.ParseMatrix("[[1,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0],[0,1,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,0,0],[0,0,1,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,1],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0,0,1]]"),
			[]int{1, 3, 0},
			1,
		},
		{
			leetcode.ParseMatrix("[[1,1,0],[1,1,0],[0,0,1]]"),
			[]int{0, 1},
			0,
		},
		{
			leetcode.ParseMatrix("[[1,0,0],[0,1,0],[0,0,1]]"),
			[]int{0, 2},
			0,
		},
		{
			leetcode.ParseMatrix("[[1,1,1],[1,1,1],[1,1,1]]"),
			[]int{1, 2},
			1,
		},
	} {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			require.Equal(t, tc.want, minMalwareSpread(tc.graph, tc.initial))
		})
	}
}

func minMalwareSpread(graph [][]int, initial []int) int {
	n := len(graph)
	parent := make([]int, n)
	size := make([]int, n)
	for i := range parent {
		parent[i] = i
		size[i] = 1
	}
	var find func(int) int
	find = func(a int) int {
		if parent[a] == a {
			return a
		}
		ra := find(parent[a])
		parent[a] = ra
		return ra
	}
	union := func(a, b int) {
		ra := find(a)
		rb := find(b)
		if ra != rb {
			size[ra] += size[rb]
			parent[rb] = ra
		}
	}
	for a := range graph {
		for b := range graph {
			if a != b && graph[a][b] == 1 {
				union(a, b)
			}
		}
	}
	malwares := make([]int, n)
	for _, i := range initial {
		malwares[find(i)]++
	}
	var maxRemoved int
	var res int
	for _, i := range initial {
		x := 1
		if malwares[find(i)] == 1 {
			x += size[find(i)]
		}
		if x > maxRemoved || x == maxRemoved && i < res {
			maxRemoved = x
			res = i
		}
	}
	return res
}
