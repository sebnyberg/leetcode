package p1395countnumberofteams

import (
	"fmt"
	"sort"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_numTeams(t *testing.T) {
	for i, tc := range []struct {
		rating []int
		want   int
	}{
		{[]int{2, 5, 3, 4, 1}, 3},
		{
			[]int{
				
			},
			9142022,
		},
	} {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			require.Equal(t, tc.want, numTeams(tc.rating))
		})
	}
}

func numTeams(rating []int) int {
	n := len(rating)
	idx := make([]int, n)
	for i := range idx {
		idx[i] = i
	}
	sort.Slice(idx, func(i, j int) bool {
		return rating[idx[i]] < rating[idx[j]]
	})
	for i := range idx {
		rating[idx[i]] = i
	}
	left := newSegtree(n)
	right := newSegtree(n)
	for r := n - 1; r > 1; r-- {
		right.set(rating[r], 1)
	}
	left.set(rating[0], 1)
	var res int
	for mid := 1; mid < n-1; mid++ {
		if rating[mid] != 0 && rating[mid] != n-1 {
			smallerLeft := left.query(0, rating[mid]-1)
			greaterRight := right.query(rating[mid]+1, n-1)
			res += smallerLeft * greaterRight

			greaterLeft := left.query(rating[mid]+1, n-1)
			smallerRight := right.query(0, rating[mid]-1)
			res += greaterLeft * smallerRight
		}
		right.set(rating[mid+1], 0)
		left.set(rating[mid], 1)
	}
	return res
}

type segtree struct {
	tree []int
	m    int
}

func newSegtree(n int) *segtree {
	m := 1
	for m < n {
		m <<= 1
	}
	tree := make([]int, m*2)
	return &segtree{
		tree: tree,
		m:    m,
	}
}

func (t *segtree) set(i int, val int) {
	t.tree[i+t.m] = val
	for j := (i + t.m) / 2; j >= 1; j /= 2 {
		t.tree[j] = t.tree[j*2] + t.tree[j*2+1]
	}
}

func (t *segtree) query(qlo, qhi int) int {
	return t.q(1, 0, t.m-1, qlo, qhi)
}

func (t *segtree) q(i, lo, hi, qlo, qhi int) int {
	if qhi < lo || qlo > hi {
		return 0
	}
	if lo >= qlo && hi <= qhi {
		return t.tree[i]
	}
	mid := lo + (hi-lo)/2
	return t.q(i*2, lo, mid, qlo, qhi) + t.q(i*2+1, mid+1, hi, qlo, qhi)
}
