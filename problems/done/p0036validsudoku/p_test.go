package p0036validsudoku

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_isValidSudoku(t *testing.T) {
	for _, tc := range []struct {
		in   [][]byte
		want bool
	}{
		{
			[][]byte{
				{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			}, true,
		},
		{
			[][]byte{
				{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
				{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			}, false,
		},
		{
			[][]byte{
				{'7', '.', '.', '.', '4', '.', '.', '.', '.'},
				{'.', '.', '.', '8', '6', '5', '.', '.', '.'},
				{'.', '1', '.', '2', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '9', '.', '.', '.'},
				{'.', '.', '.', '.', '5', '.', '5', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '2', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
			}, false,
		},
	} {
		t.Run(fmt.Sprintf("%+v", tc.in), func(t *testing.T) {
			require.Equal(t, tc.want, isValidSudoku(tc.in))
		})
	}
}

func isValidSudoku(board [][]byte) bool {
	// Choose cleaner code over saving 3 bytes
	// Index from 1
	var cells [9][10]bool
	var cols [9][10]bool
	var rows [9][10]bool

	for i := range board {
		for j, ch := range board[i] {
			if ch == '.' {
				continue
			}
			n := ch - '0'
			if cells[i/3+(j/3)*3][n] {
				return false
			}
			if cols[j][n] {
				return false
			}
			if rows[i][n] {
				return false
			}
			cells[i/3+(j/3)*3][n] = true
			cols[j][n] = true
			rows[i][n] = true
		}
	}

	return true
}
