package p1966binarysearchablenumbersinanunsortedarray

import (
	"fmt"
	"math"
	"testing"

	"github.com/stretchr/testify/require"
)

func Test_binarySearchableNumbers(t *testing.T) {
	for _, tc := range []struct {
		nums []int
		want int
	}{
		{[]int{-10000, -9948, -9896, -9844, -9792, -9740, -9688, -9636, -9584, -9532, -9480, -9428, -9376, -9324, -9272, -9220, -9168, -9116, -9064, -9012, -8960, -8908, -8856, -8804, -8752, -8700, -8648, -8596, -8544, -8492, -8440, -8388, -8336, -8284, -8232, -8180, -8128, -8076, -8024, -7972, -7920, -7868, -7816, -7764, -7712, -7660, -7608, -7556, -7504, -7452, -7400, -7348, -7296, -7244, -7192, -7140, -7088, -7036, -6984, -6932, -6880, -6828, -6776, -6724, -6672, -6620, -6568, -6516, -6464, -6412, -6360, -6308, -6256, -6204, -6152, -6100, -6048, -5996, -5944, -5892, -5840, -5788, -5736, -5684, -5632, -5580, -5528, -5476, -5424, -5372, -5320, -5268, -5216, -5164, -5112, -5060, -5008, -4956, -4904, -4852, -4800, -4748, -4696, -4644, -4592, -4540, -4488, -4436, -4384, -4332, -4280, -4228, -4176, -4124, -4072, -4020, -3968, -3916, -3864, -3812, -3760, -3708, -3656, -3604, -3552, -3500, -3448, -3396, -3344, -3292, -3240, -3188, -3136, -3084, -3032, -2980, -2928, -2876, -2824, -2772, -2720, -2668, -2616, -2564, -2512, -2460, -2408, -2356, -2304, -2252, -2200, -2148, -2096, -2044, -1992, -1940, -1888, -1836, -1784, -1732, -1680, -1628, -1576, -1524, -1472, -1420, -1368, -1316, -1264, -1212, -1160, -1108, -1056, -1004, -952, -900, -848, -796, -744, -692, -640, -588, -536, -484, -432, -380, -328, -276, -224, -172, -120, -68, -16, 36, 88, 140, 192, 244, 296, 348, 400, 452, 504, 556, 608, 660, 712, 764, 816, 868, 920, 972, 1024, 1076, 1128, 1180, 1232, 1284, 1336, 1388, 1440, 1492, 1544, 1596, 1648, 1700, 1752, 1804, 1856, 1908, 1960, 2012, 2064, 2116, 2168, 2220, 2272, 2324, 2376, 2428, 2480, 2532, 2584, 2636, 2688, 2740, 2792, 2844, 2896, 2948, 3468, 3416, 3364, 3312, 3260, 3208, 3156, 3104, 3052, 3000, 3520, 3572, 3624, 3676, 3728, 3780, 3832, 3884, 3936, 3988, 4040, 4092, 4144, 4196, 4248, 4300, 4352, 4404, 4456, 4508, 4560, 4612, 4664, 4716, 4768, 4820, 4872, 4924, 4976, 5028, 5080, 5132, 5184, 5236, 5288, 5340, 5392, 5444, 5496, 5548, 5600, 5652, 5704, 5756, 5808, 5860, 5912, 5964, 6016, 6068, 6120, 6172, 6224, 6276, 6328, 6380, 6432, 6484, 6536, 6588, 6640, 6692, 6744, 6796, 6848, 6900, 6952, 7004, 7056, 7108, 7160, 7212, 7264, 7784, 7732, 7680, 7628, 7576, 7524, 7472, 7420, 7368, 7316, 7836, 7888, 7940, 7992, 8044, 8096, 8148, 8200, 8252, 8304, 8356, 8408, 8460, 8512, 8564, 8616, 8668, 8720, 8772, 8824, 8876, 8928, 8980, 9032, 9084, 9136, 9188, 9240, 9292, 9344, 9396, 9448, 9500, 9552, 9604, 9656, 9708, 9760, 9812, 9864, 9916, 9968, 10020, 10072, 10124, 10176, 10228, 10280, 10332, 10384, 10436, 10488, 10540, 10592, 10644, 10696, 10748, 10800, 10852, 10904, 10956, 11008, 11060, 11112, 11164, 11216, 11268, 11320, 11372, 11424, 11476, 11528, 11580, 11632, 11684, 11736, 11788, 11840, 11892, 11944, 11996, 12048, 12100, 12152, 12204, 12256, 12308, 12360, 12412, 12464, 12516, 12568, 12620, 12672, 12724, 12776, 12828, 12880, 12932, 12984, 13036, 13088, 13140, 13192, 13244, 13296, 13348, 13400, 13452, 13504, 13556, 13608, 13660, 13712, 13764, 13816, 13868, 13920, 13972, 14024, 14076, 14128, 14180, 14232, 14284, 14336, 14388, 14440, 14492, 14544, 14596, 14648, 14700, 14752, 14804, 14856, 14908, 14960, 15012, 15064, 15116, 15168, 15220, 15272, 15324, 15376, 15428, 15480, 15532, 15584, 15636, 15688, 15740, 15792, 15844, 15896, 15948, 16468, 16416, 16364, 16312, 16260, 16208, 16156, 16104, 16052, 16000, 16520, 16572, 16624, 16676, 16728, 16780, 16832, 16884, 16936, 16988, 17040, 17092, 17144, 17196, 17248, 17300, 17352, 17404, 17456, 17508, 17560, 17612, 17664, 17716, 17768, 17820, 17872, 17924, 17976, 18028, 18080, 18132, 18184, 18236, 18288, 18340, 18392, 18444, 18496, 18548, 18600, 18652, 18704, 18756, 18808, 18860, 18912, 18964, 19016, 19068, 19120, 19172, 19224, 19276, 19328, 19380, 19432, 19484, 19536, 19588, 19640, 19692, 19744, 19796, 19848, 19900, 19952, 20004, 20056, 20108, 20160, 20212, 20264, 20316, 20368, 20420, 20472, 20524, 20576, 20628, 20680, 20732, 20784, 20836, 20888, 20940, 20992, 21044, 21096, 21148, 21200, 21252, 21304, 21356, 21408, 21460, 21512, 21564, 21616, 21668, 21720, 21772, 21824, 21876, 21928, 21980, 22032, 22084, 22136, 22188, 22240, 22292, 22344, 22396, 22448, 22500, 22552, 22604, 22656, 22708, 22760, 22812, 22864, 22916, 22968, 23020, 23072, 23124, 23176, 23228, 23280, 23332, 23384, 23436, 23488, 23540, 23592, 23644, 23696, 23748, 23800, 23852, 23904, 23956, 24008, 24060, 24112, 24164, 24216, 24268, 24320, 24372, 24424, 24476, 24528, 24580, 24632, 24684, 24736, 24788, 24840, 24892, 24944, 24996, 25048, 25100, 25152, 25204, 25256, 25308, 25360, 25412, 25464, 25516, 25568, 25620, 25672, 25724, 25776, 25828, 25880, 25932, 25984, 26036, 26088, 26140, 26192, 26244, 26296, 26348, 26400, 26452, 26504, 26556, 26608, 26660, 26712, 26764, 26816, 26868, 26920, 26972, 27024, 27076, 27128, 27180, 27232, 27284, 27336, 27388, 27440, 27492, 27544, 27596, 27648, 27700, 27752, 27804, 27856, 27908, 27960, 28012, 28064, 28116, 28168, 28220, 28272, 28324, 28376, 28428, 28480, 28532, 28584, 28636, 28688, 28740, 28792, 28844, 28896, 28948, 29000, 29052, 29104, 29156, 29208, 29260, 29312, 29364, 29416, 29468, 29520, 29572, 29624, 29676, 29728, 29780, 29832, 29884, 29936, 29988, 30040, 30092, 30144, 30196, 30248, 30300, 30352, 30404, 30456, 30508, 30560, 30612, 30664, 30716, 30768, 30820, 30872, 30924, 30976, 31028, 31080, 31132, 31184, 31236, 31288, 31340, 31392, 31444, 31496, 31548, 31600, 31652, 31704, 31756, 31808, 31860, 31912, 31964, 32016, 32068, 32120, 32172, 32224, 32276, 32328, 32380, 32432, 32484, 32536, 32588, 32640, 32692, 32744, 32796, 32848, 32900, 32952, 33004, 33056, 33108, 33160, 33212, 33264, 33316, 33368, 33420, 33472, 33524, 33576, 33628, 33680, 33732, 33784, 33836, 33888, 33940, 33992, 34044, 34096, 34148, 34200, 34252, 34304, 34356, 34408, 34460, 34512, 34564, 34616, 34668, 34720, 34772, 34824, 34876, 34928, 34980, 35032, 35084, 35136, 35188, 35240, 35292, 35344, 35396, 35448, 35500, 35552, 35604, 35656, 35708, 35760, 35812, 35864, 35916, 35968, 36020, 36072, 36124, 36176, 36228, 36280, 36332, 36384, 36436, 36488, 36540, 36592, 36644, 36696, 36748, 36800, 36852, 36904, 36956, 37008, 37060, 37112, 37164, 37216, 37268, 37320, 37372, 37424, 37476, 37528, 37580, 37632, 37684, 37736, 37788, 37840, 37892, 37944, 37996, 38048, 38100, 38152, 38204, 38256, 38308, 38360, 38412, 38464, 38516, 38568, 38620, 38672, 38724, 38776, 38828, 38880, 38932, 38984, 39036, 39088, 39140, 39192, 39244, 39296, 39348, 39400, 39452, 39504, 39556, 39608, 39660, 39712, 39764, 39816, 39868, 39920, 39972, 40024, 40076, 40128, 40180, 40232, 40284, 40336, 40388, 40440, 40492, 40544, 40596, 40648, 40700, 40752, 40804, 40856, 40908, 40960, 41012, 41064, 41116, 41168, 41220, 41272, 41324, 41376, 41428, 41480, 41532, 41584, 41636, 41688, 41740, 41792, 41844, 41896, 41948},
			970},
		{[]int{-1, 5, 2}, 1},
		{[]int{7}, 1},
	} {
		t.Run(fmt.Sprintf("%+v", tc.nums), func(t *testing.T) {
			require.Equal(t, tc.want, binarySearchableNumbers(tc.nums))
		})
	}
}

func binarySearchableNumbers(nums []int) int {
	stack := make([]int, 0)
	maxVal := math.MinInt32
	for _, num := range nums {
		for len(stack) > 0 && stack[len(stack)-1] > num {
			stack = stack[:len(stack)-1]
		}
		if num > maxVal {
			stack = append(stack, num)
		}
		maxVal = max(maxVal, num)
	}
	return len(stack)
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
