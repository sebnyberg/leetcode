package p2218maximumvalueofkcoinsfrompiles

import (
	"fmt"
	"leetcode"
	"testing"

	"github.com/stretchr/testify/require"
)

var big = leetcode.ParseMatrix("[[83931,28558,51358,32816,91128,68384,93863,20372,63025,46820,63756,51325,14926,86045,21560,21168,28289,87403,20961,78023,88045,41146,94634,55044,78387,96665,94763,44689,77376,40183,7397,49976,57598,18625,47479,15671,17311,32468,61915,35825,6879,16379,3769,30509,15186,18219,12795,15906,81612,91582,97586,78623,27354,51678,86446,92322,26089,85622,16888,26667,96424,84314,58217,3140,79953,12663,24345,55555,18175,99450,98506,49352,96513,79095,22843,11247,6486,98430,62939,46823,42377,51695,9995,87747,19742,2941,18793,37548,59274,26817,70651,19688,14860,37539,51248,82355,67107,62108,63585,95375,58093,91074,32466,32911,98398,77209,59796,28523,3978,16171,65785,23370,36289,36959,86567,1727,56917,30451,77540,87148,30916,28269,74534,37605,80861,78266,37571,84457,41086,5713,44859,6141,47715,63988,36450,67924,25764,4061,69072,17185,43050,72171,98096,29119,92021,62691,36657,21598,38056,15133,67249,24912,74155,73927,9410,58950,27169,17071,40088,92715,22476,49704,32977,79072,47909,79146,34687,32599,42269,79077,42797,88344,43106,15079,49461,11097,97802,37826,37026,56406,57570,83283,92056,53184,47871,12534,21025,42753,73881,61025,4014,40761,43220,65691,8116,30599,65704,51445,70210,51270,96679,65267,35862,21030,83203,58482,34479,24046,47671,51749,53030,99522,92855,41484,24492,25347,94536,87628,83606,431,9832,60481,4591,31014,86284,58213,96005,6238,50704,63802,31163,8007,14650,6764,21516,13749,51762,63712,55559,9005,11639,61362,97678,6593,22604,3770,76767,52209,6885,86440,10980,7030,95268,44422,85905,76453,40263,6081,70867],[74667,15741,93994,2297,44164,92839,37110,31947,2606,25435,25214,8650,88221,2388,12923,71462,36248,34312,36469,5137,45078,90471,75579,1721,57829,43108,16749,58046,87007,20623,74499,47175,45782,61042,29811,82771,82356,63039,82985,48453,41841,40462,77757,3563,79996,70102,90942,24871,35158,26625,9801,13156,63176,34572,32059,70220,15194,74008,74972,87428,90974,80792,69547,23023,86555,34137,5141,78993,84986,31297,69743,30321,81105,37754,66614,26135,10474,10775,18123,14457,57537,21380,90549,25830,39778,96305,73902,20418,17559,98675,98039,6761,20078,96416,11863,66122,11621,5462,93035,41745,61679,18140,21544,7147,3990,69681,92113,45532,95604,65176,39529,24901,95533,5008,7386,76627,77845,42257,18645,25261,31858,608,59545,72118,98617,77390,74130,97121,50403,92898,73085,20681,25902,75730,17442,41494,27996,49250,82433,35618,11231,26955,8388,86664,79135,17621,98387,34687,16445,40997,94515,11296,88837,39910,18596,42037,73538,4725,41845,31115,20367,80839,71658,25497],[47301,55476,64302,23798,70787,55340,33576,72327,42583,6306,42063,43741,98598,36153,49573,17983,56951,14666,21637,61123,39904,12586,29843,89260,59276,10972,50818,16129,60790,59104,48447,68841,92060,35373,39675,82371,62736,73773,56590,20971,98424,12091,43956,5677,84805,7207,84489,31169,78032,69823],[98378,51300,49240,54000,53577,21591,92787,39170,45798,38322,92667,27041,60268,44922,93732,97779,53254,81261,63836,75691,16709,8094,81387,30095,24840,67988,52786,9494,21846,7488,77928,50581,80031,70048,65253,77334,82804,24517,67106,39020,15088,28710,90427,35895,34038,79224,73877,63555,15837,68861,79866,42991,77090,5425,44800],[58612,14057,43642,72275,94315,782,48583,86862,95413,87970,2584,95739,13204,27779,22379,39545,37076,13083,3759,33679,7826,59042,99469,47765,30806,63982,69302,82538,80734,2009,13105,55851,44844,15659,46918,16160,12843,31138,1175,90730,5802,17485,61318,7869,91521],[95581,75618,752,18579,37653,56166,99210,46942,23371,81048,22089,14018,36640,27976,45344,7108,21316,4421,75843,83887,21027,52370,2290,56932,30146,11286,54248,8718,90368,52955,20938,40993,5666,13561,49377,13301,33861,43306,19382,77654,29732,29872,51851,46826,42000,78453,68575,77635,82135,38134,95365,92634,48740,91342,11697,71855,4219,25926,31012,96111,83210,29065,28710,53614,77803,85123,6409,66241,61585,87863,39719,81229,68692,85140,54559,2792,17063,82452,57465],[1579,96177,21348,12672,50425,4400,41370,62663,89397,49512,95675,99865,56245,81361,50686,47280,98353,18133,34239,38320,94417,92037,64702,29523,21051,21755,41190,49805,27829,74192,3876,67968,38900,61902,44039,6660,22019,29353,98244,7355,89934,92495,23434,69589,76553,27284,80504,49105,71908,64305,41361,79079,24620,60447,58827,83838,48431,33099,48175,56175,36243,50205,94001,56864,88514,49430,7425,15059,39166,30204,30124,75617,53409,92844,74469,93820,92736,15197,62263,58176,64925,84457,82511,14809,65142,97200,58280,5584,53608,9038,65143,67019,20645,66649,76341,36213,76337,98921,36357,13751,6096,68505,50909,18931,84028,56368,62625,66069,88138,51152,66730,9840,91387,5344,23648,48145,67542,56867,61698,66666,36273,17690,26235,33506,66295,46733,19261,60242,32216,95131,2641,32363,91822,14097,29771,12973,72317,81205,87206,52083,84023,72262,47172,98437,9045,55131,36191,67311,68918,85819,96849,51842,78683,97822,24139,86606,78573,54969,55162,69384,15512,958,30597,88704,93323,37606,69777,46934,5637,71056,90840,37053,43237,83974,47683,48074,82593,61233,75361,49230,79690,77170,65532,9374,66847,19403,4863,63791,84020,38414,27098,70794,61516,27100,55908,27454,59563,69925,98896,92740,83703,45131,85967,16875,47719,57732,24031,55421,37247,85404,17949,12625,74207,89561,98294,8531,83119,84247,46709,45937,77575,81618,19356,84710,48776,99895,30043,57048,45114,5372,70841,33728,79676,21855,41322,9849,1297,92735,9446,70682,77423,19846,28858,94690,68185,62677,95503,55619,70305,24377,31915,74753,56619,98380,86890,84375,87527,24459,72465,66165,13729,5725,54120,12067,93540,10427,11863,26879,89340,58757,6072,55195,69608,33723,1662,38138,89581,71277,10476,6916,78171,76413,35145,79912,42818,94344,66431,93266,43673,11914,5833,15996,1602,59756,95884,11900,10610,74240,27371,16977,32650,84629,38444,21375,65299,38370,18962,6615,77473,59181,95721,95196,54641,19981,98142,30043,97940,87328,11933,38655,23559,8105,32176,1279,69724,5549,74830,51762,13851,26039,10007,27336,89018,23313,62748,58897,92844,55805,65536,2077,14382,24718,70274,54479,39150,89436,82707,37127,97830,84203,3608,13784,25797,18345,34780,76956,59064,47344,30308,694,26987,49062],[59996,46581,3453,55248,79319,86835,56909,67534,40581,40247,6124,15373,26498,85304,96666,62525,2327,69589,34660,95475,68197,47126,87500,88684,82334,69492,4436,5467,52960,56648,94715,23462,93590,70964,51327,1529,55796,73575,58261,80350,70271,80987,71441,78615,62906,77829,65572,62468,69677,83750,29737,83536,49472,58528,70978,20261,71060,84578,4329,81854,16588,24467,96833,71021,24817,68124,91304,48315,53378,35476,40404,7641,60881,83863,48111,70604,4797,53187,97145,38122,11373,79305,41848,58427,89788,20033,48144,46496,30064,18725,2293,73363,58536,95397,95060,37346,73792,19752,16908,9368,43285,73971,88674,11273,45724,31943,74944,40787,11322,4429,61345,65904,55644,17607,25233,64945,39206,83961,41762,37897,48571,38842,58456,87438,4966,45194,63032,54042,44719,51946,84492,85091,4527,34120,18627,12512,27376,7445,82864,6431,40019,83412,82449,43639,28642,92411,22372,67915,91045,14626,96189,58968,35274,79431,38570,23319,99367,53746,5329,77385,69215,69711,11642,78180,40100,39683,13710,38526,87480,15167,63188,11129,75969,47819,6508,40210,99751,73982,74145,36234,31765,75463,61612,85940,86085,12644,46944,53945,75205,59857,40071,12475,40730,67704],[95293,73441,67982,80805,7051,35927,73024,63823,19018,39652,68237,42012,39370,99114,44059,12566,13995,42215,85413,38476,66445,16471,63520,24656,5817,79094,81420,15380,74085,97534,1682,96866,85776,46117,51065,20035,16022,87325,62219,2764,88965,98144,82747,10461,12180,13769,22318,11651,7967,76417,83584,64854,83136,22967,21937,99813,81519,43181,64655,2857,61163,69704,10555,9072,85463,99379,73045,82236,90195,80798,70964,35779,51922,86634,65878,38948,9701,13715,33990,75968,82001,24383],[28041,8763,12362,41351,42738,22949,6854,4727,71385,53692,54926,1106,41904,43252,63549,77820,60491,86461,23710,92666,95643,82928,9432,65847,42215,37016,13193,72939,13998,66017,53960,99274,46727,76750,594,71315,94460,78535,96378,96036,13786,81837,67465,9027,234,79927,2835,66496,18955,13735,57642,14112,89950,43973,47573,29906,13271,69132,84272,41295,80676,79620,55407,84756,94422,14785,98820,19574,42876,8559,43111,69669,43367,54366,94598,79902,63236,18263,92714,62127,5130,77097,12045,24817,71046,98336,40708,28909,40613,59465,3083,22008,80848,39926,26674,15139,88565,41430,12612,37935,51686,45522,58373,56736,43947,62490,13506,87127,95145,14834,44899,20476,97514,52396,49828,32800,12458,9590,12632,72337,23319,19534,62721,58081,40829,23780,20040,71296,17078,91627,94092,4636,86617,35910,71149,39419,3596,98405,40026,98386,91681,66789,13056,17871,59596,22957,616,86925,48903,53613,99788,33675,81023,31387,37728,4671,68645,24672,20417,64998,17515,51644,73182,31995,65547,62202,91440,42387,30142,74574,23074,21893,86709,71037,81403,35430,77668,62980,80175,29765,96971,17858],[73456,10808,68085,13070,19684,18949,26511,13807,96537,59207,92505,7407,6650,38714,14099,9127,32614,42518,39774,45361,20689,80648,77287,14417,61311,53090,63339,36872,28705,49839,2555,94339,60801,14283,84248,88680,83269,36654,55263,63913,97462,91037,80746,21255,374,16672,35050,51512,12422,6325,25860,23075,88386,64554,76696,32369,55129,48773,28042,47655,71431,82667,90738,82168,97287,39259,90879,84591,10353,23080,13794,82890,45868,1875,86545,25044,66400,73133,98653,16334,60969,86735,46277,36845,73115,56205,91462,77958,86147,60041,94718,97289,88509,72911,78703,3367,66020,65005,63619,19596,63017,82249,88917,62297,98338,58717,95957,86398,43859,88120,44019,87007,95260,21565,8067,14151,93967,16304,85479,92713,37028,33309,86018,13640,28705,75033,11832,9670,57689,14344,38579,88153,727,25364,41975,31988,6797,73002,22975,83069,79049,41784,64198,18899,26781,24850,83536,95570,48002,82980,64723,45953,56646,46208,40488,80386,87501,49782,91095,91982,5593,56765,80445,87438,57633,10498,43510,74433,92563,46366,1220,8112,53531,18643,37987,42317,67753,53836,31380,32434,46242,17841,28942,63769,8091,11065,86155,52448,15661,49837,9018,45232,81319,22311,95318,43093,61715,48559,67850,8885,15042,18,43373,68205,99707,56630,81392,68191,59168,31682,54998,1515,6082,95146,30328,78126,90887,95409,39003,34713,24257,52145,6797,59627,26021,77007,93228,13762,57088,73945,30955,75829,72025,78446,26136,63041,34409,33018,19863,31079,92340,21161,10938,21906,79466,54824,67060,4594,11488,68214,97102,41275,90703,66374,86100,46304,86784,10356,68171,55826,18564,28065,37045,94872,56275,29631,11971,88907,1370,12868,80857,70760,56435,9277,34227,53784,6785,26495,10259,25853,19818,59180,19800,65938,64242,32835,29445,24861,67070,12613,96826,86229,32972,22297,93654,74131,72362,10413,58573,70502,46013,11714,19545,97004,20738,15335,46464,54994,7058,66244,45636,78215,5868,55711,78268,18005,13222,95772,64119,88428,93154,91249,72425,93711,90564,38343,79556,65532,40609,55819,44554,6064,69162,86996,27463,61042,39622,28721,25017,46473,95525,86299,71215,70768,63455,40735,72186,45462,45363,79259,19273,4780,92542,1718,87654,78954,44880,50042,78441,18765,76664,35247,99556,72852,66611,81938,60346,10696,96550,3329,80374,93395,96041,47383,91762,80670,73618,65310],[39890,84965,65307,77480,81969,53241,51835,59010,64099,10541,32309,3351,95518,17128,82698,70258,52201,22765,75524,54947,79379,28474,49040,52798,34706,33437,35818,83826,37202,59775,28268,21640,10862,48114,44851,23077,53080,13192,96079,89268,43384,86099,26121,19799,71386,18815,74093,25697,3824,78904,79794,44825,70623,50672,23709,29847,55863,35822,72377,84521,61338,1636,33471,87747,12605,12579,17782,56846,13076,87092,91683,28916,81573,87648,49951,75832,59632,51239,61589,22772,21522,44296,35535,23597,81781,93100,88602,88408,30963,8707,86462,79501,60223,21977,69856,40648,70495,94593,53794,32847,77644,7602,57857,9980,41920,72858,55635]]")

func Test_maxValueOfCoins(t *testing.T) {
	for _, tc := range []struct {
		piles [][]int
		k     int
		want  int
	}{
		{
			big,
			1443, 10,
		},
		{
			leetcode.ParseMatrix("[[100],[1,700]]"),
			2, 701,
		},
		{
			leetcode.ParseMatrix("[[1,100,3],[7,8,9]]"),
			2, 101,
		},
		{
			leetcode.ParseMatrix("[[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]]"),
			7, 706,
		},
	} {
		t.Run(fmt.Sprintf("%+v", tc.piles), func(t *testing.T) {
			require.Equal(t, tc.want, maxValueOfCoins(tc.piles, tc.k))
		})
	}
}

func maxValueOfCoins(piles [][]int, k int) int {
	// This is a typical max of current + max of not doing something => DP
	// With DP always try top-down first with memoization.
	mem := make(map[key]int)
	// Pre-calculate sums for piles
	sums := make([][]int, len(piles))
	for i, p := range piles {
		sums[i] = make([]int, len(p)+1)
		for j := range p {
			sums[i][j+1] = sums[i][j] + p[j]
		}
	}
	res := dp(mem, sums, 0, k, len(piles))
	return res
}

type key struct {
	i, k int
}

func dp(mem map[key]int, sums [][]int, i, k, n int) int {
	if i == n || k == 0 {
		return 0
	}
	kk := key{i, k}
	if v, exists := mem[kk]; exists {
		return v
	}
	// We can pick [0,min(k,len(sums[i])] coins from the current pile
	var res int
	for coins := 0; coins <= min(k, len(sums[i])-1); coins++ {
		// Or pick the top-most coin
		res = max(res, sums[i][coins]+dp(mem, sums, i+1, k-coins, n))
	}

	mem[kk] = res
	return mem[kk]
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
